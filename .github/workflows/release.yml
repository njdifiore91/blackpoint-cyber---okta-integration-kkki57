name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (vX.Y.Z)'
        required: true
        type: string
        pattern: '^v\d+\.\d+\.\d+$'

env:
  REGISTRY: ${{ secrets.ECR_REGISTRY }}
  RELEASE_VERSION: ${{ github.event.inputs.version || github.ref_name }}
  DEPLOY_TIMESTAMP: ${{ github.event.timestamp }}
  COMMIT_SHA: ${{ github.sha }}
  GO_VERSION: '1.21'
  DOCKER_BUILDKIT: '1'
  MIN_COVERAGE: '85'
  MAX_CRITICAL_VULNERABILITIES: '0'
  MAX_HIGH_VULNERABILITIES: '0'
  MIN_EVENTS_PER_SECOND: '1000'
  MAX_BRONZE_LATENCY: '1'
  MAX_SILVER_LATENCY: '5'
  MAX_GOLD_LATENCY: '30'

permissions:
  id-token: write
  contents: write
  packages: write
  deployments: write
  issues: write
  pull-requests: write
  security-events: write

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        run: |
          if ! echo "$RELEASE_VERSION" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Invalid version format. Must match vX.Y.Z"
            exit 1
          fi

      - name: Verify changelog entries
        run: |
          if ! grep -q "$RELEASE_VERSION" CHANGELOG.md; then
            echo "No changelog entry found for $RELEASE_VERSION"
            exit 1
          fi

      - name: Generate release notes
        uses: release-drafter/release-drafter@v5
        with:
          version: ${{ env.RELEASE_VERSION }}
          config-name: .github/release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
          body_path: CHANGELOG.md

      - name: Update version references
        run: |
          find . -type f -name "*.yaml" -exec sed -i "s/version: .*/version: $RELEASE_VERSION/g" {} +
          find . -type f -name "*.go" -exec sed -i "s/Version = \".*\"/Version = \"$RELEASE_VERSION\"/g" {} +

  promote-images:
    name: Promote Container Images
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [analyzer, collector, normalizer]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@v1
        with:
          image-ref: ${{ env.REGISTRY }}/${{ matrix.component }}:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Additional security scan
        uses: snyk/actions/docker@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.REGISTRY }}/${{ matrix.component }}:latest
          args: --severity-threshold=high

      - name: Promote images with immutable tags
        run: |
          docker pull ${{ env.REGISTRY }}/${{ matrix.component }}:latest
          docker tag ${{ env.REGISTRY }}/${{ matrix.component }}:latest \
                     ${{ env.REGISTRY }}/${{ matrix.component }}:${{ env.RELEASE_VERSION }}
          docker push ${{ env.REGISTRY }}/${{ matrix.component }}:${{ env.RELEASE_VERSION }}

      - name: Sign container image
        run: |
          cosign sign --key ${{ secrets.COSIGN_KEY }} \
                     ${{ env.REGISTRY }}/${{ matrix.component }}:${{ env.RELEASE_VERSION }}

      - name: Generate SBOM
        run: |
          syft ${{ env.REGISTRY }}/${{ matrix.component }}:${{ env.RELEASE_VERSION }} \
               -o spdx-json > sbom-${{ matrix.component }}.json

  deploy:
    name: Deploy Release
    needs: promote-images
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} \
                                  --region ${{ secrets.AWS_REGION }}

      - name: Take pre-deployment backup
        run: |
          kubectl get all -n blackpoint-system -o yaml > pre_deployment_backup.yaml

      - name: Update Kubernetes deployments
        run: |
          for component in analyzer collector normalizer; do
            kubectl set image deployment/$component \
                    $component=${{ env.REGISTRY }}/$component:${{ env.RELEASE_VERSION }} \
                    -n blackpoint-system
          done

      - name: Verify rolling updates
        run: |
          for component in analyzer collector normalizer; do
            kubectl rollout status deployment/$component \
                    -n blackpoint-system --timeout=300s
          done

      - name: Run performance tests
        run: |
          k6 run tests/performance/performance-tests.yaml

      - name: Validate latency requirements
        run: |
          for i in {1..10}; do
            bronze_latency=$(curl -s metrics-endpoint | grep bronze_latency | awk '{print $2}')
            silver_latency=$(curl -s metrics-endpoint | grep silver_latency | awk '{print $2}')
            gold_latency=$(curl -s metrics-endpoint | grep gold_latency | awk '{print $2}')
            
            if (( $(echo "$bronze_latency > $MAX_BRONZE_LATENCY" | bc -l) )); then
              echo "Bronze tier latency exceeded: $bronze_latency"
              exit 1
            fi
            if (( $(echo "$silver_latency > $MAX_SILVER_LATENCY" | bc -l) )); then
              echo "Silver tier latency exceeded: $silver_latency"
              exit 1
            fi
            if (( $(echo "$gold_latency > $MAX_GOLD_LATENCY" | bc -l) )); then
              echo "Gold tier latency exceeded: $gold_latency"
              exit 1
            fi
          done

      - name: Execute smoke tests
        run: |
          ./tests/smoke/smoke-tests.yaml

      - name: Verify system health
        run: |
          kubectl get pods,svc,deployments -n blackpoint-system
          kubectl top pods -n blackpoint-system

      - name: Update monitoring dashboards
        run: |
          curl -X POST ${{ secrets.GRAFANA_API }}/dashboards/db \
               -H "Authorization: Bearer ${{ secrets.GRAFANA_TOKEN }}" \
               -d @deploy/monitoring/release-dashboard.json